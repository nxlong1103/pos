import { db } from "../config/db.js";


import { updateOrderTotal } from "./orderItem.model.js";

// üîπ L·∫•y danh s√°ch combo + c√°c m√≥n trong combo
export const getAllCombosModel = async () => {
  const [combos] = await db.query("SELECT * FROM combos");

  for (const combo of combos) {
    const [items] = await db.query(
      `SELECT ci.quantity, p.id AS product_id, p.name, p.price, p.image
       FROM combo_items ci
       JOIN products p ON ci.product_id = p.id
       WHERE ci.combo_id = ?`,
      [combo.id]
    );
    combo.items = items;
  }

  return combos;
};

// üîπ Th√™m combo v√†o order_items (ch·ªâ 1 d√≤ng, kh√¥ng th√™m m√≥n con)
export const addComboToOrderModel = async (orderId, comboId, note = null, quantity = 1) => {
  // 1Ô∏è‚É£ L·∫•y th√¥ng tin combo
  const [[comboInfo]] = await db.query(
    "SELECT id, name, price, description FROM combos WHERE id = ?",
    [comboId]
  );
  if (!comboInfo) throw new Error("Kh√¥ng t√¨m th·∫•y combo");

  // 2Ô∏è‚É£ L·∫•y danh s√°ch m√≥n con trong combo (ch·ªâ ƒë·ªÉ tr·∫£ v·ªÅ ‚Äî kh√¥ng ghi DB)
  const [comboProducts] = await db.query(
    `SELECT p.id AS product_id, p.name, p.price, ci.quantity
     FROM combo_items ci
     JOIN products p ON ci.product_id = p.id
     WHERE ci.combo_id = ?`,
    [comboId]
  );

  // 3Ô∏è‚É£ Ghi combo cha v√†o order_items
  const [comboResult] = await db.query(
    `INSERT INTO order_items (order_id, combo_id, quantity, price, note)
     VALUES (?, ?, ?, ?, ?)`,
    [
      orderId,
      comboId,
      quantity,
      comboInfo.price,
      note && note.trim() !== '' ? note : null, // ‚úÖ ch·ªâ ghi khi c√≥ note
    ]
  );

  // 4Ô∏è‚É£ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn ƒë∆°n
  await updateOrderTotal(orderId);

  // 5Ô∏è‚É£ Tr·∫£ k·∫øt qu·∫£ cho controller
  return {
    comboItemId: comboResult.insertId,
    comboName: comboInfo.name,
    comboProducts, // ‚úÖ v·∫´n g·ª≠i v·ªÅ cho FE hi·ªÉn th·ªã chi ti·∫øt
  };
};
