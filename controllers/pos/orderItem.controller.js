// controllers/orderItem.controller.js
import {
  getProductPrice,
  getToppingPrice,
  addProductItemToOrder,
  addToppingToOrderItem,
  updateOrderTotal,
  getOrderIdByItemId,
} from '../../models/orderItem.model.js';
import { addComboToOrderModel } from '../../models/combo.model.js';

/**
 * üß© Th√™m 1 m√≥n (ho·∫∑c topping) v√†o ƒë∆°n h√†ng
 */
export const addOrderItem = async (req, res) => {
  try {
    const {
      order_id,
      product_id,
      size_id,
      topping_id,
      quantity = 1,
      note,
      parent_item_id,
      combo_id,
    } = req.body;

    if (!order_id) {
      return res.status(400).json({ error: 'Thi·∫øu order_id' });
    }

    let price = 0;

    // üçß N·∫øu l√† topping
    if (topping_id) {
      price = await getToppingPrice(topping_id);
      if (!price) return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y topping' });

      await addToppingToOrderItem(order_id, parent_item_id, { price });
      await updateOrderTotal(order_id);
      return res.json({ message: '‚úÖ Th√™m topping th√†nh c√¥ng', price });
    }

    // üçΩÔ∏è N·∫øu l√† m√≥n ch√≠nh
    if (product_id) {
      if (size_id) price = await getProductPrice(product_id, size_id);
      else {
        // N·∫øu kh√¥ng c√≥ size, l·∫•y gi√° g·ªëc t·ª´ b·∫£ng products
        const [[row]] = await db.query('SELECT price FROM products WHERE id = ?', [product_id]);
        price = row?.price || 0;
      }

      const orderItemId = await addProductItemToOrder(order_id, {
        product_id,
        size_id,
        quantity,
        price,
        note,
        combo_id,
      });

      await updateOrderTotal(order_id);
      return res.json({
        message: '‚úÖ Th√™m m√≥n th√†nh c√¥ng',
        order_item_id: orderItemId,
        price,
      });
    }

    return res.status(400).json({ error: 'Kh√¥ng c√≥ d·ªØ li·ªáu m√≥n ho·∫∑c topping h·ª£p l·ªá' });
  } catch (err) {
    console.error('‚ùå L·ªói khi th√™m m√≥n v√†o order:', err);
    res.status(500).json({ error: 'L·ªói khi th√™m m√≥n v√†o order' });
  }
};

/**
 * üéÅ Th√™m combo v√†o ƒë∆°n h√†ng
 */
export const addComboToOrder = async (req, res) => {
  try {
    let { order_id, combo_id, note } = req.body;
    order_id = parseInt(order_id);
    combo_id = parseInt(combo_id);

    if (!order_id || !combo_id) {
      return res.status(400).json({ error: 'Thi·∫øu order_id ho·∫∑c combo_id' });
    }

    const result = await addComboToOrderModel(order_id, combo_id, note || null);

    await updateOrderTotal(order_id);

    res.json({
      message: '‚úÖ Th√™m combo v√†o ƒë∆°n h√†ng th√†nh c√¥ng!',
      ...result,
    });
  } catch (err) {
    console.error('‚ùå L·ªói khi th√™m combo:', err);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ th√™m combo v√†o ƒë∆°n' });
  }
};

/**
 * üçß Th√™m topping v√†o m√≥n c√≥ s·∫µn
 */
export const addTopping = async (req, res) => {
  try {
    const { order_item_id, topping_id } = req.body;

    if (!order_item_id || !topping_id)
      return res.status(400).json({ error: 'Thi·∫øu order_item_id ho·∫∑c topping_id' });

    const mainItem = await getOrderIdByItemId(order_item_id);
    if (!mainItem)
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y m√≥n ch√≠nh' });

    const toppingPrice = await getToppingPrice(topping_id);
    if (!toppingPrice)
      return res.status(404).json({ error: 'Kh√¥ng t√¨m th·∫•y topping' });

    await addToppingToOrderItem(mainItem.order_id, order_item_id, { price: toppingPrice });
    await updateOrderTotal(mainItem.order_id);

    res.json({ message: '‚úÖ Topping th√™m th√†nh c√¥ng' });
  } catch (err) {
    console.error('‚ùå L·ªói khi th√™m topping:', err);
    res.status(500).json({ error: 'L·ªói khi th√™m topping v√†o m√≥n' });
  }
};
