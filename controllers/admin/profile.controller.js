import dayjs from "dayjs";
import bcrypt from "bcryptjs";
import {
  findUserById,
  updateUserById,
  getPasswordById,
  updatePasswordById,
} from "../../models/user.model.js";

// üßç‚Äç‚ôÇÔ∏è L·∫•y profile
export const getProfile = async (req, res) => {
  try {
    const user = await findUserById(req.params.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    if (user.birthday) user.birthday = dayjs(user.birthday).format("YYYY-MM-DD");
    res.json(user);
  } catch (error) {
    console.error("L·ªói getProfile:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

// üßæ C·∫≠p nh·∫≠t profile
export const updateProfile = async (req, res) => {
  try {
    await updateUserById(req.params.id, req.body);
    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói updateProfile:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};

// üîê ƒê·ªïi m·∫≠t kh·∫©u
export const changePassword = async (req, res) => {
  const { currentPassword, newPassword, confirmPassword } = req.body;
  if (!currentPassword || !newPassword || !confirmPassword)
    return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu y√™u c·∫ßu" });

  if (newPassword !== confirmPassword)
    return res.status(400).json({ message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng kh·ªõp" });

  try {
    const user = await getPasswordById(req.params.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });

    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) return res.status(400).json({ message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng" });

    const hashed = await bcrypt.hash(newPassword, 10);
    await updatePasswordById(req.params.id, hashed);

    res.json({ message: "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói changePassword:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß" });
  }
};
